%section.player-container.double-margin-bottom
  .container
    .row
      .span12
        = render :partial => 'shared/shot_audio', :locals => {:shot => @shot}
%section.double-margin-bottom
  .container
    .row
      .span5
        %p.no-margin-bottom
          -if @shot.description.blank?
            %span.muted
              No Description
          -else
            =@shot.description
        .clearfix.margin-bottom
        -if @shot.reverse_rebounds.count > 0
          .well
            %h5.no-margin-bottom
              This shot is a rebound of
            -@shot.reverse_rebounds.each do |r|
              %h6.no-margin-bottom
                = link_to (r.from_shot) do
                  =r.from_shot.title
        .clearfix
        .comments
          .page-header
            - if @shot.comments.count == 1
              %h2 
                = @shot.comments.count
                Comment
            - else
              %h2
                = @shot.comments.count
                Comments
          = render :partial => @shot.comments
          - if current_user.present?
            %h5
              Add a new comment
            = form_for([@shot, @shot.comments.build]) do |f|
              .field
                = f.text_area :body, :rows => 9, :required => true, :style=>"width:100%;"
              = submit_tag("Post comment", :class=>"btn btn-primary")
      .span6.offset1
        = render :partial => 'shared/shot_controls', :locals => {:shot => @shot} 
       


/ %section.player-container
/   .container
/     .row
/       .span12
/         .margin-bottom
/           .media
/             = link_to (@shot.user), :class => "pull-left" do 
/               %img.media-object.avatar-lg{:src => "#{@shot.user.avatar.url(:medium)}"}
/             .media-body.margin-bottom
/               %h3.media-heading 
/                 = @shot.title
/               %p.muted
/                 by:
/                 = link_to (@shot.user) do
/                   = @shot.user.name
/                 = @shot.created_at.strftime("%B %d, %Y")
/             .clearfix
/         .row
/           .span6
/             = render :partial => 'shared/shot_audio', :locals => {:shot => @shot}
/             %p
/               = @shot.description
/             -if @shot.reverse_rebounds.count > 0
/               .well
/                 %h5.no-margin-bottom
/                   This shot is a rebound of
/                 -@shot.reverse_rebounds.each do |r|
/                   %h6.no-margin-bottom
/                     = link_to (r.from_shot) do
/                       =r.from_shot.title
/             .comments
/               - if @shot.comments.count == 0
/               - else
/                 .page-header
/                   - if @shot.comments.count == 1
/                     %h5 
/                       = @shot.comments.count
/                       Response
/                   - else
/                     %h5
/                       = @shot.comments.count
/                       Responses
/                 = render :partial => @shot.comments
/               - if current_user.present?
/                 .page-header
/                 #page-header
/                   %h5
/                     Add a new comment
/                 = form_for([@shot, @shot.comments.build]) do |f|
/                   .field
/                     = f.text_area :body, :rows => 5, :required => true
/                   = submit_tag("Post comment", :class=>"btn") 
/           .span6
/             %p
/               %strong
/                 Tags
/               %br
/               - if @shot.tags.count == 0
/                 %span.muted
/                   no tags
/               - else
/                 / = raw @shot.tag_list.map { |t| link_to t, tag_path(t) }.join(', ')
/                 - @shot.tag_list.map do |t|
/                   = link_to(tag_path(t)) do 
/                     = t
/                     %br
/             %p
/               %strong
/                 Likes
/               %br
/               -if @shot.likes.size > 0
/                 =link_to(:action =>"likes", :controller=>"shots", :id=>@shot.id) do
/                   =@shot.likes.size
/               -else
/                 =@shot.likes.size
/             %br
/             -if @shot.rebounds.count > 0
/               = link_to(shot_rebound_path(@shot, :id => @shot.id)) do
/                 %p
/                   %strong
/                     = @shot.rebounds.count
/                     -if @shot.rebounds.count == 1
/                       Rebound
/                     -else
/                       Rebounds
/             - if current_user.present?
/               //like button
/               -if current_user.voted_up_on? @shot
/                 = link_to({:action => 'un_like_shot', :id => @shot.id})do
/                   %span.liked
/                     %i.icon-heart
/                     You like
/               -else
/                 = link_to({:action => 'like_shot', :id => @shot.id})do
/                   %i.icon-heart
/                   Like?
/               %br
/               = link_to(new_shot_rebound_path(@shot.id, :id => @shot.id))do
/                 %i.icon-circle-arrow-right 
/                 Rebound
/               %br
/               -if @shot.user.id == current_user.id
/                 / Button to trigger modal
/                 %a{"data-toggle" => "modal", :href => "#delete", :role => "button"}
/                   %i.icon-trash 
/                   Delete
/                 %br
/                 = link_to({:action => 'edit', :id => @shot.id})do
/                   %i.icon-cog
/                   Edit


/ Delete Modal
#delete.modal.hide.fade{"aria-hidden" => "true", "aria-labelledby" => "myModalLabel", :role => "dialog", :tabindex => "-1"}
  .modal-header
    %button.close{"aria-hidden" => "true", "data-dismiss" => "modal", :type => "button"} Ã—
    %h3#myModalLabel 
      Delete Shot
  .modal-body
    %p
      Are you sure you want to permanently delete this shot?
    %p
      Shot Name:
      = @shot.title
  .modal-footer
    %button.btn{"aria-hidden" => "true", "data-dismiss" => "modal"} Cancel
    = form_for(:shot, :url => {:action => 'destroy_shot', :id => @shot.id}, :html => {:class => "display-inline"}) do |f|
      = submit_tag("Delete Shot", :class=>"btn")